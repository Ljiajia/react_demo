{"version":3,"sources":["component/sharing.js","App.js","serviceWorker.js","store/reducer.js","store/store.js","index.js"],"names":["Sharing","Component","App","className","exact","from","to","path","component","Boolean","window","location","hostname","match","defaultState","events","title","id","types","money","value","names","eventindex","typeindex","eventsName","typesName","list","reducer","state","action","type","index","push","method","splice","moneys","methods","store","createStore","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"4RAaeA,E,YAXX,aAAc,uE,sEAIV,OACI,4C,GANUC,aCmBPC,G,uLAbX,OACE,yBAAKC,UAAU,OACZ,kBAAC,IAAD,KACE,kBAAC,IAAD,KACC,kBAAC,IAAD,CAAUC,OAAK,EAACC,KAAK,IAAIC,GAAG,UAC7B,kBAAC,IAAD,CAAOC,KAAK,QAAQC,UAAWR,W,GAPxBC,cCOEQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,4lBClBN,IAAMC,EAAa,CACfC,OAAO,CAAC,CACJC,MAAM,eACNC,GAAG,GACL,CACED,MAAM,eACNC,GAAG,GACL,CACED,MAAM,eACNC,GAAG,GACL,CACED,MAAM,qBACNC,GAAG,IAEPC,MAAM,CAAC,CACHF,MAAM,qBACNC,GAAG,GACL,CACED,MAAM,eACNC,GAAG,GACL,CACED,MAAM,KACNC,GAAG,GACL,CACED,MAAM,qBACNC,GAAG,IAENE,MAAM,GACPC,MAAM,GACNC,MAAM,GACNC,WAAW,EACXC,UAAU,EACVC,WAAW,GACXC,UAAU,GACVC,KAAK,IAiCMC,EA/BD,WAA8B,IAA7BC,EAA4B,uDAAtBd,EAAae,EAAS,uCACvC,OAAOA,EAAOC,MACV,IAAK,QACL,OAAO,EAAP,GAAWF,EAAX,CAAiBT,MAAMU,EAAOT,QAC9B,IAAK,QACL,OAAO,EAAP,GAAWQ,EAAX,CAAiBP,MAAMQ,EAAOT,QAC9B,IAAK,SACL,OAAO,EAAP,GAAWQ,EAAX,CAAiBJ,WAAWK,EAAOT,MAAME,WAAWO,EAAOE,QAC3D,IAAK,QACL,OAAO,EAAP,GAAWH,EAAX,CAAiBH,UAAUI,EAAOT,MAAMG,UAAUM,EAAOE,QACzD,IAAK,KAGL,IAAK,MAEL,OADAH,EAAMF,KAAKM,KAAK,CAACF,KAAKD,EAAOI,OAAOT,WAAWK,EAAOL,WAAWH,MAAMQ,EAAOR,MAAMF,MAAMU,EAAOV,MAAMM,UAAUI,EAAOJ,YACjH,EAAP,GAAWG,EAAX,CAAiBF,KAAK,YAAIE,EAAMF,QAChC,IAAK,SAEL,OADAE,EAAMF,KAAKQ,OAAOL,EAAOE,MAAM,GACxB,EAAP,GAAWH,EAAX,CAAiBF,KAAK,YAAIE,EAAMF,QAChC,IAAK,WACL,OAAO,EAAP,GAAWE,EAAX,CAAiBR,MAAMS,EAAOT,QAC9B,IAAK,OAEL,IAAK,SACL,OAAO,EAAP,GAAWQ,EAAX,CAAiBF,KAAK,GAAD,mBAAKE,EAAMF,MAAX,CAAgB,CAACS,OAAON,EAAOT,MAAMI,WAAWK,EAAOO,aAC5E,IAAK,SACL,OAAO,EAAP,GAAWR,EAAX,CAAiBR,MAAMS,EAAOT,QAC9B,QACA,OAAOQ,IC7DAS,EADLC,YAAYX,GCKtBY,IAASC,OAAO,kBAAC,IAAD,CAAUH,MAAOA,GAAO,kBAAC,EAAD,OAAoBI,SAASC,eAAe,SH0H9E,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.ae984122.chunk.js","sourcesContent":["import React, { Component } from 'react'\nclass Sharing extends Component{\n    constructor(){\n        super()\n    }\n    render(){\n        return (\n            <div>\n                Sharing\n            </div>\n        )\n    }\n}\nexport default Sharing","import React, { Component } from 'react';\nimport {HashRouter,BrowserRouter ,Switch,Route,Redirect} from \"react-router-dom\";\nimport Sharing from \"./component/sharing\"; \nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">  \n         <BrowserRouter >\n           <Switch>\n            <Redirect exact from=\"/\" to=\"/home\"></Redirect>\n           <Route path=\"/home\" component={Sharing}></Route> \n           </Switch>\n         </BrowserRouter >\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const defaultState={\r\n    events:[{\r\n        title:\"吃饭\",\r\n        id:0\r\n    },{\r\n        title:\"上礼\",\r\n        id:1\r\n    },{\r\n        title:\"结婚\",\r\n        id:2\r\n    },{\r\n        title:\"生孩子\",\r\n        id:3\r\n    }],\r\n    types:[{\r\n        title:\"银行卡\",\r\n        id:0\r\n    },{\r\n        title:\"微信\",\r\n        id:1\r\n    },{\r\n        title:\"QQ\",\r\n        id:2\r\n    },{\r\n        title:\"支付宝\",\r\n        id:3\r\n    }]\r\n    ,money:'',\r\n    value:\"\",  \r\n    names:'',\r\n    eventindex:0,\r\n    typeindex:0, \r\n    eventsName:'',\r\n    typesName:\"\",\r\n    list:[]\r\n}\r\nconst reducer=(state=defaultState,action)=>{\r\n    switch(action.type){\r\n        case \"MONEY\": \r\n        return {...state,money:action.value};\r\n        case \"NAMES\": \r\n        return {...state,names:action.value};\r\n        case \"EVENTS\":\r\n        return {...state,eventsName:action.value,eventindex:action.index};\r\n        case \"TYPES\":\r\n        return {...state,typesName:action.value,typeindex:action.index};\r\n        case \"IN\":   \r\n        state.list.push({type:action.method,eventsName:action.eventsName,names:action.names,money:action.money,typesName:action.typesName}) \r\n        return {...state,list:[...state.list]}; \r\n        case \"out\":   \r\n        state.list.push({type:action.method,eventsName:action.eventsName,names:action.names,money:action.money,typesName:action.typesName}) \r\n        return {...state,list:[...state.list]}; \r\n        case 'REMOVE':\r\n        state.list.splice(action.index,1); \r\n        return {...state,list:[...state.list]};\r\n        case \"SETVALUE\":\r\n        return {...state,value:action.value};\r\n        case \"SHOU\": \r\n        return {...state,list:[...state.list,{moneys:action.value,eventsName:action.methods}]}; \r\n        case \"ZHICHU\":\r\n        return {...state,list:[...state.list,{moneys:action.value,eventsName:action.methods}]};\r\n        case \"QUXIAO\":\r\n        return {...state,value:action.value};\r\n        default:\r\n        return state;\r\n    }\r\n}\r\nexport default reducer;","import {createStore} from \"redux\";\r\nimport reducer from \"./reducer.js\";\r\nlet store=createStore(reducer);\r\nexport default store;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {Provider} from \"react-redux\";\nimport store from \"./store/store\";\nReactDOM.render(<Provider store={store}><App /></Provider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}